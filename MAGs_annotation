# Prodigal

```
#!/bin/bash -l

# --------------------------------------------------------------
### PART 1: Requests resources to run your job.
# --------------------------------------------------------------
### Optional. Set the job name
#SBATCH --job-name=prodigal
### Optional. Set the output filename.
### SLURM reads %x as the job name and %j as the job ID
#SBATCH --output=%x-%j.out
### REQUIRED. Specify the PI group for this job
#SBATCH --account=laubitz
### Optional. Request email when job begins and ends
### SBATCH --mail-type=ALL
### Optional. Specify email address to use for notification
### SBATCH --mail-user=schiro@email.arizona.edu
### REQUIRED. Set the partition for your job.
#SBATCH --partition=standard
### REQUIRED. Set the number of cores that will be used for this job. 
#SBATCH --ntasks=48
### REQUIRED. Set the number of nodes
#SBATCH --nodes=1
### REQUIRED. Set the memory required for this job.
#SBATCH --mem=192gb
### REQUIRED. Specify the time required for this job, hhh:mm:ss
#SBATCH --time=20:00:00


# --------------------------------------------------------------
### PART 2: Executes bash commands to run your job
# --------------------------------------------------------------

conda activate prokka

cd /xdisk/pkiela/schiro/CPAE/bins
mkdir prodigal
for file in *.f*; do
	name=${file%%.fna}
	prodigal -i ${file} -a prodigal/${name}_pro.fasta -d prodigal/${name}_gene.fasta \
-f gff \
-p meta \
-q \
-m

done
```
move them to a new folder

```
cd /xdisk/pkiela/schiro/CPAE/bins/prodigal
mkdir amino 
mv *pro* amino

```
Once this is done I run KOfan_scan

```
#!/bin/bash -l

# --------------------------------------------------------------
### PART 1: Requests resources to run your job.
# --------------------------------------------------------------
### Optional. Set the job name
#SBATCH --job-name=Kofam
### Optional. Set the output filename.
### SLURM reads %x as the job name and %j as the job ID
#SBATCH --output=%x-%j.out
### REQUIRED. Specify the PI group for this job
#SBATCH --account=laubitz
### Optional. Request email when job begins and ends
### SBATCH --mail-type=ALL
### Optional. Specify email address to use for notification
### SBATCH --mail-user=schiro@email.arizona.edu
### REQUIRED. Set the partition for your job.
#SBATCH --partition=standard
### REQUIRED. Set the number of cores that will be used for this job. 
#SBATCH --ntasks=20
### REQUIRED. Set the number of nodes
#SBATCH --nodes=1
### REQUIRED. Set the memory required for this job.
#SBATCH --mem=100gb
### REQUIRED. Specify the time required for this job, hhh:mm:ss
#SBATCH --time=20:00:00


# --------------------------------------------------------------
### PART 2: Executes bash commands to run your job
# --------------------------------------------------------------
conda activate KOfam


cd /xdisk/pkiela/schiro/CPAE/bins/prodigal/amino
for file in *_pro.fasta; do
	name=${file%%_pro.fasta}
	exec_annotation -f mapper -o ${name}_annotations.txt --cpu 20 $file
done
```
Now I moved all the annotation.txt files in R and created a table.
```
### Read genome KO annotations in
setwd("/Users/gabri/Library/CloudStorage/Box-Box/CPAE_manuscript/new_analyses/annotations_genomes/")
list_of_files = list.files()
library(dplyr)
file_paths= as.list(list_of_files)
gene_count_df <- data.frame(Gene = character(0), stringsAsFactors = FALSE)

for (file_path in file_paths)
  {
    # Read the gene list from the file, assuming a two-column format
    gene_list <- read.delim(file_path, header = FALSE, stringsAsFactors = FALSE, col.names = c("ORF", "Gene"))
    # Keep only the gene names from the left column
    gene_names <- gene_list$Gene
    # Create a dataframe with gene names and counts
    gene_counts <- data.frame(Gene = gene_names, count = 1)
    gene_counts = gene_counts[!gene_counts$Gene =="",]
    gene_counts = aggregate(count~Gene, gene_counts, FUN = sum)
    # Count gene occurrences and store them in a column named after the file
    gene_count_df <- merge(gene_count_df,gene_counts, by = "Gene", all = TRUE) 
    colnames(gene_count_df)[ncol(gene_count_df)] <- basename(file_path)
}

gene_count_df[is.na(gene_count_df)] = 0
gene_count_df = column_to_rownames(gene_count_df, var="Gene")
colnames(gene_count_df) <- gsub("_.*", "", colnames(gene_count_df))
saveRDS(gene_count_df, "KO_counts.RDS")
```

